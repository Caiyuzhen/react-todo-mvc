{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/react-todo-mvc/src/App.js\";\nimport { Button, Input, Table, Space, Popconfirm } from 'antd';\nimport React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Search\n} = Input; //从 input 中【🌟🌟解构】并获取 Search 组件\n//思路：\n//1.找到对应的组件，搭建基本【布局结构（无数据状态）】\n//2.渲染基础的 table ：【发起请求（需要提前 Mock 数据）】 (componentDidMount) -> 【拿到数据】 -> 【交给 List】(this.setState)\n//3.写具体的业务逻辑：\n//3-1.删除逻辑 （点击哪个就用哪个 id，调用删除接口，重新拉去列表）\n//3-2.搜索逻辑\n//类组件内不能用 const、let，来定义变量，直接定义就好了\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      //表格数据\n      list: [],\n      //定义【每一列】要展示的数据结构,通常会把 【dataIndex】 跟 【key】 写成一样的\n      columns: [{\n        title: '任务编号',\n        dataIndex: 'id',\n        //编号 （对应的就是 json 的数据结构！）\n        key: 'id'\n      }, {\n        title: '任务名称',\n        dataIndex: 'name',\n        //名称 （对应的就是 json 的数据结构！）\n        key: 'name'\n      }, {\n        title: '任务描述',\n        dataIndex: 'des',\n        //描述 （对应的就是 json 的数据结构！）\n        key: 'des'\n      }, {\n        title: '操作',\n        dataIndex: 'do',\n        //操作 （对应的就是 json 的数据结构！此案例没有）\n        key: 'do',\n        render: (_, record) =>\n        /*#__PURE__*/\n        // 返回操作按钮\n        _jsxDEV(Popconfirm, {\n          title: \"Sure to delete?\",\n          onConfirm: this.deleteData(_, record),\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }]\n    };\n\n    this.onSearch = inputValue => {\n      console.log(inputValue);\n    };\n\n    this.deleteData = (_, record) => {\n      console.log('_, record');\n    };\n\n    this.loadList = async () => {\n      const res = await axios.get('http://localhost:3001/data');\n      console.log(res); //🌟 把拿到的数据存到 state 的 list 内, 因为下面 render 内有调用 state.list\n\n      this.setState({\n        list: res.data\n      });\n    };\n  }\n\n  //🌟🌟 找到合适的【生命周期函数】,发送请求\n  componentDidMount() {\n    // 发送接口请求\n    this.loadList();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        placeholder: \"input search text\",\n        allowClear: true,\n        enterButton: \"Search\",\n        size: \"large\",\n        onSearch: this.onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table //表格列数据\n      , {\n        dataSource: this.state.list //表头数据\n        ,\n        columns: this.state.columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zen/Desktop/react-todo-mvc/src/App.js"],"names":["Button","Input","Table","Space","Popconfirm","React","axios","Search","App","Component","state","list","columns","title","dataIndex","key","render","_","record","deleteData","onSearch","inputValue","console","log","loadList","res","get","setState","data","componentDidMount"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,UAAtC,QAAwD,MAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaN,KAAnB,C,CAAyB;AAEzB;AACA;AACA;AACA;AACE;AACA;AAGF;;AAEA,MAAMO,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACN;AACAC,MAAAA,IAAI,EAAE,EAFA;AAGN;AACAC,MAAAA,OAAO,EAAE,CACP;AACEC,QAAAA,KAAK,EAAE,MADT;AAEEC,QAAAA,SAAS,EAAE,IAFb;AAEkB;AAChBC,QAAAA,GAAG,EAAE;AAHP,OADO,EAMP;AACEF,QAAAA,KAAK,EAAE,MADT;AAEEC,QAAAA,SAAS,EAAE,MAFb;AAEoB;AAClBC,QAAAA,GAAG,EAAE;AAHP,OANO,EAWP;AACEF,QAAAA,KAAK,EAAE,MADT;AAEEC,QAAAA,SAAS,EAAE,KAFb;AAEmB;AACjBC,QAAAA,GAAG,EAAE;AAHP,OAXO,EAgBP;AACEF,QAAAA,KAAK,EAAE,IADT;AAEEC,QAAAA,SAAS,EAAE,IAFb;AAEkB;AAChBC,QAAAA,GAAG,EAAE,IAHP;AAIEC,QAAAA,MAAM,EAAC,CAACC,CAAD,EAAIC,MAAJ;AAAA;AACL;AACA,gBAAC,UAAD;AACE,UAAA,KAAK,EAAC,iBADR;AAEE,UAAA,SAAS,EAAE,KAAKC,UAAL,CAAgBF,CAAhB,EAAmBC,MAAnB,CAFb;AAAA,iCAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA;AANJ,OAhBO;AAJH,KADwB;;AAAA,SAuChCE,QAvCgC,GAuCpBC,UAAD,IAAgB;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACD,KAzC+B;;AAAA,SA6ChCF,UA7CgC,GA6CnB,CAACF,CAAD,EAAIC,MAAJ,KAAe;AAC1BI,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,KA/C+B;;AAAA,SAoDhCC,QApDgC,GAoDrB,YAAY;AACrB,YAAMC,GAAG,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAU,4BAAV,CAAlB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ,EAFqB,CAIrB;;AACA,WAAKE,QAAL,CAAc;AACZhB,QAAAA,IAAI,EAAEc,GAAG,CAACG;AADE,OAAd;AAGD,KA5D+B;AAAA;;AAgEhC;AACAC,EAAAA,iBAAiB,GAAI;AACnB;AACA,SAAKL,QAAL;AACD;;AAGDR,EAAAA,MAAM,GAAI;AACR,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BAIE,QAAC,MAAD;AACE,QAAA,WAAW,EAAC,mBADd;AAEE,QAAA,UAAU,MAFZ;AAGE,QAAA,WAAW,EAAC,QAHd;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,QAAQ,EAAE,KAAKI;AALjB;AAAA;AAAA;AAAA;AAAA,cAJF,eAWE,QAAC,KAAD,CACE;AADF;AAEE,QAAA,UAAU,EAAE,KAAKV,KAAL,CAAWC,IAFzB,CAGE;AAHF;AAIE,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE;AAJtB;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD;;AA5F+B;;AA+FlC,eAAeJ,GAAf","sourcesContent":["import { Button, Input, Table, Space, Popconfirm } from 'antd'\nimport React from 'react'\nimport './App.css'\nimport axios from 'axios'\n\nconst { Search } = Input //从 input 中【🌟🌟解构】并获取 Search 组件\n\n//思路：\n//1.找到对应的组件，搭建基本【布局结构（无数据状态）】\n//2.渲染基础的 table ：【发起请求（需要提前 Mock 数据）】 (componentDidMount) -> 【拿到数据】 -> 【交给 List】(this.setState)\n//3.写具体的业务逻辑：\n  //3-1.删除逻辑 （点击哪个就用哪个 id，调用删除接口，重新拉去列表）\n  //3-2.搜索逻辑\n\n\n//类组件内不能用 const、let，来定义变量，直接定义就好了\n\nclass App extends React.Component {\n  state = {\n    //表格数据\n    list: [],\n    //定义【每一列】要展示的数据结构,通常会把 【dataIndex】 跟 【key】 写成一样的\n    columns: [\n      {\n        title: '任务编号',\n        dataIndex: 'id',//编号 （对应的就是 json 的数据结构！）\n        key: 'id',\n      },\n      {\n        title: '任务名称',\n        dataIndex: 'name',//名称 （对应的就是 json 的数据结构！）\n        key: 'name',\n      },\n      {\n        title: '任务描述',\n        dataIndex: 'des',//描述 （对应的就是 json 的数据结构！）\n        key: 'des',\n      },\n      {\n        title: '操作',\n        dataIndex: 'do',//操作 （对应的就是 json 的数据结构！此案例没有）\n        key: 'do',\n        render:(_, record)=>(\n          // 返回操作按钮\n          <Popconfirm \n            title=\"Sure to delete?\"\n            onConfirm={this.deleteData(_, record)}\n            >\n            <a>Delete</a>\n          </Popconfirm>\n        )\n      },\n    ]\n  }\n\n  // 搜索(ant 已经封装好了搜索方法)\n  onSearch = (inputValue) => {\n    console.log(inputValue);\n  };\n\n\n  // 删除\n  deleteData = (_, record) => {\n    console.log('_, record');\n  }\n\n\n\n  //🌟🌟 定义加载列表的函数(定义请求数据的方法)\n  loadList = async () => {\n    const res = await axios.get('http://localhost:3001/data')\n    console.log(res);\n\n    //🌟 把拿到的数据存到 state 的 list 内, 因为下面 render 内有调用 state.list\n    this.setState({\n      list: res.data\n    })\n  }\n\n\n\n  //🌟🌟 找到合适的【生命周期函数】,发送请求\n  componentDidMount () {\n    // 发送接口请求\n    this.loadList()\n  }\n\n\n  render () {\n    return (\n      <div className=\"container\">\n        {/* <Button type='primary'>按钮</Button> */}\n\n        {/* 搜索框，点击搜索图标、清除图标，或按下回车键时的回调，回调的 value 是当前输入框的值 */}\n        <Search\n          placeholder=\"input search text\"\n          allowClear\n          enterButton=\"Search\"\n          size=\"large\"\n          onSearch={this.onSearch}\n        />\n        <Table\n          //表格列数据\n          dataSource={this.state.list}\n          //表头数据\n          columns={this.state.columns} \n        />;\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}