{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/react-todo-mvc/src/App.js\";\nimport { Button, Input, Table, Space, Popconfirm } from 'antd';\nimport React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Search\n} = Input; //从 input 中【🌟🌟解构】并获取 Search 组件\n//思路：\n//1.找到对应的组件，搭建基本【布局结构（无数据状态）】\n//2.渲染基础的 table ：【发起请求（需要提前 Mock 数据）】 (componentDidMount) -> 【拿到数据】 -> 【交给 List】(this.setState)\n//3.写具体的业务逻辑：\n//3-1.删除逻辑 （点击哪个就用哪个 id，调用删除接口，重新拉取更新列表）\n//3-2.搜索逻辑 （拿到关键词，调用接口重新获取列表数据）\n//类组件内不能用 const、let，来定义变量，直接定义就好了\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      list: [],\n      //表格数据\n      columns: [//定义【每一列】要展示的数据结构,通常会把 【dataIndex】 跟 【key】 写成一样的\n      {\n        title: '任务编号',\n        dataIndex: 'id',\n        //编号 （对应的就是 json 的数据结构！）\n        key: 'id'\n      }, {\n        title: '任务名称',\n        dataIndex: 'name',\n        //名称 （对应的就是 json 的数据结构！）\n        key: 'name'\n      }, {\n        title: '任务描述',\n        dataIndex: 'des',\n        //描述 （对应的就是 json 的数据结构！）\n        key: 'des'\n      }, {\n        title: '操作',\n        dataIndex: 'do',\n        //操作 （对应的就是 json 的数据结构！此案例没有）\n        key: 'do',\n        render: (_, record) =>\n        /*#__PURE__*/\n        //ant 封装好了，可以返回对应列表 _,record，包含 id\n        _jsxDEV(Space, {\n          size: \"middle\",\n          children: /*#__PURE__*/_jsxDEV(Popconfirm // 返回【操作按钮 popover】\n          , {\n            title: \"Sure to delete?\",\n            onConfirm: () => this.deleteData(_, record) //需要回调参数的话，就需要改写为🌟 ()=>this.XXX() 🌟的形式！！！ ant 封装好了，可以返回对应列表 record，包含 id\n            ,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"\\u5220\\u9664\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }]\n    };\n\n    this.onSearch = async inputValue => {\n      console.log(inputValue); //调用搜索接口(每次请求的就是 inputValue 的数据，如果为空则返回所有数据)\n\n      const res = await axios.get(`http://localhost:3001/data/?q=${inputValue}`); //把数据更新到 setState 内，更新数据\n\n      this.setState({\n        list: res.data //🔥因为 json 写的是 data 对象！\n\n      });\n    };\n\n    this.deleteData = async (_, record) => {\n      //调用删除接口\n      await axios.delete(`http://localhost:3001/data/${record.id}`); //重新加载列表\n\n      this.loadList();\n    };\n\n    this.loadList = async () => {\n      const res = await axios.get('http://localhost:3001/data');\n      console.log(res); //🌟 把拿到的数据存到 state 的 list 内, 因为下面 render 内有调用 state.list\n\n      this.setState({\n        list: res.data //🔥因为 json 写的是 data 对象！\n\n      });\n    };\n  }\n\n  //🌟🌟 找到合适的【生命周期函数】,发送请求\n  componentDidMount() {\n    // 发送接口请求\n    this.loadList();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        placeholder: \"input search text\",\n        allowClear: true,\n        enterButton: \"Search\",\n        size: \"large\",\n        onSearch: this.onSearch,\n        value: this.state.keyword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table //表格列数据\n      , {\n        dataSource: this.state.list //表头数据\n        ,\n        columns: this.state.columns\n      }, this.state.columns.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zen/Desktop/react-todo-mvc/src/App.js"],"names":["Button","Input","Table","Space","Popconfirm","React","axios","Search","App","Component","state","list","columns","title","dataIndex","key","render","_","record","deleteData","onSearch","inputValue","console","log","res","get","setState","data","delete","id","loadList","componentDidMount","keyword"],"mappings":"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","sourcesContent":["import { Button, Input, Table, Space, Popconfirm } from 'antd'\nimport React from 'react'\nimport './App.css'\nimport axios from 'axios'\n\nconst { Search } = Input //从 input 中【🌟🌟解构】并获取 Search 组件\n\n//思路：\n//1.找到对应的组件，搭建基本【布局结构（无数据状态）】\n//2.渲染基础的 table ：【发起请求（需要提前 Mock 数据）】 (componentDidMount) -> 【拿到数据】 -> 【交给 List】(this.setState)\n//3.写具体的业务逻辑：\n  //3-1.删除逻辑 （点击哪个就用哪个 id，调用删除接口，重新拉取更新列表）\n  //3-2.搜索逻辑 （拿到关键词，调用接口重新获取列表数据）\n\n\n//类组件内不能用 const、let，来定义变量，直接定义就好了\n\nclass App extends React.Component {\n  state = {\n    \n    list: [],//表格数据\n    \n    columns: [ //定义【每一列】要展示的数据结构,通常会把 【dataIndex】 跟 【key】 写成一样的\n      {\n        title: '任务编号',\n        dataIndex: 'id',//编号 （对应的就是 json 的数据结构！）\n        key: 'id',\n      },\n      {\n        title: '任务名称',\n        dataIndex: 'name',//名称 （对应的就是 json 的数据结构！）\n        key: 'name',\n      },\n      {\n        title: '任务描述',\n        dataIndex: 'des',//描述 （对应的就是 json 的数据结构！）\n        key: 'des',\n      },\n      {\n        title: '操作',\n        dataIndex: 'do',//操作 （对应的就是 json 的数据结构！此案例没有）\n        key: 'do',\n        render:(_,record)=>(//ant 封装好了，可以返回对应列表 _,record，包含 id\n          <Space size=\"middle\">  \n            <Popconfirm  // 返回【操作按钮 popover】\n                title=\"Sure to delete?\"\n                onConfirm={()=>this.deleteData(_,record)} //需要回调参数的话，就需要改写为🌟 ()=>this.XXX() 🌟的形式！！！ ant 封装好了，可以返回对应列表 record，包含 id\n                >\n                <a>删除</a>\n            </Popconfirm>\n          </Space>\n        )\n      },\n    ]\n  }\n\n\n\n  // 搜索(ant 已经封装好了搜索方法,返回搜索值)\n  onSearch = async(inputValue) => {\n    console.log(inputValue);\n    //调用搜索接口(每次请求的就是 inputValue 的数据，如果为空则返回所有数据)\n    const res = await axios.get(`http://localhost:3001/data/?q=${inputValue}`);\n    //把数据更新到 setState 内，更新数据\n    this.setState({\n      list:res.data //🔥因为 json 写的是 data 对象！\n    })\n  };\n\n\n\n  // 删除,发送【异步请求函数】，调用删除接口 (接收 state 传入的 _,record 数据,ant 封装好了，可以返回对应列表 record，包含 id)\n  deleteData = async(_,record) => {\n    //调用删除接口\n    await axios.delete(`http://localhost:3001/data/${record.id}`)\n    //重新加载列表\n    this.loadList()\n  }\n\n  \n\n  //🌟🌟 定义加载列表的【异步请求函数】(定义请求数据的方法)\n  loadList = async () => {\n    const res = await axios.get('http://localhost:3001/data')\n    console.log(res);\n\n    //🌟 把拿到的数据存到 state 的 list 内, 因为下面 render 内有调用 state.list\n    this.setState({\n      list: res.data //🔥因为 json 写的是 data 对象！\n    })\n  }\n\n\n\n  //🌟🌟 找到合适的【生命周期函数】,发送请求\n  componentDidMount () {\n    // 发送接口请求\n    this.loadList()\n  }\n\n\n  render () {\n    return (\n      <div className=\"container\">\n        {/* <Button type='primary'>按钮</Button> */}\n\n        {/* 搜索框，点击搜索图标、清除图标，或按下回车键时的回调，回调的 value 是当前输入框的值 */}\n        <Search\n          placeholder=\"input search text\"\n          allowClear\n          enterButton=\"Search\"\n          size=\"large\"\n          onSearch={this.onSearch}\n          value={this.state.keyword}\n        />\n        <Table \n          //表格列数据\n          dataSource={this.state.list}\n          //表头数据\n          columns={this.state.columns} \n          key= {this.state.columns.key}\n        />;\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}