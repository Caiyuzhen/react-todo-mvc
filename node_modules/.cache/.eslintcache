[{"/Users/zen/Desktop/react-todo-mvc/src/index.js":"1","/Users/zen/Desktop/react-todo-mvc/src/App.js":"2"},{"size":194,"mtime":1646127857000,"results":"3","hashOfConfig":"4"},{"size":4248,"mtime":1654317614252,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1599ymq",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/Users/zen/Desktop/react-todo-mvc/src/index.js",[],[],"/Users/zen/Desktop/react-todo-mvc/src/App.js",["13","14"],[],"import { Button, Input, Table, Space, Popconfirm } from 'antd'\nimport React from 'react'\nimport './App.css'\nimport axios from 'axios'\n\nconst { Search } = Input //从 input 中【🌟🌟解构】并获取 Search 组件\n\n//思路：\n//1.找到对应的组件，搭建基本【布局结构（无数据状态）】\n//2.渲染基础的 table ：【发起请求（需要提前 Mock 数据）】 (componentDidMount) -> 【拿到数据】 -> 【交给 List】(this.setState)\n//3.写具体的业务逻辑：\n  //3-1.删除逻辑 （点击哪个就用哪个 id，调用删除接口，重新拉取更新列表）\n  //3-2.搜索逻辑 （拿到关键词，调用接口重新获取列表数据）\n\n\n//类组件内不能用 const、let，来定义变量，直接定义就好了\n\nclass App extends React.Component {\n  state = {\n    \n    list: [],//表格数据\n    \n    columns: [ //定义【每一列】要展示的数据结构,通常会把 【dataIndex】 跟 【key】 写成一样的\n      {\n        title: '任务编号',\n        dataIndex: 'id',//编号 （对应的就是 json 的数据结构！）\n        key: 'id',\n      },\n      {\n        title: '任务名称',\n        dataIndex: 'name',//名称 （对应的就是 json 的数据结构！）\n        key: 'name',\n      },\n      {\n        title: '任务描述',\n        dataIndex: 'des',//描述 （对应的就是 json 的数据结构！）\n        key: 'des',\n      },\n      {\n        title: '操作',\n        dataIndex: 'do',//操作 （对应的就是 json 的数据结构！此案例没有）\n        key: 'do',\n        render:(_,record)=>(//ant 封装好了，可以返回对应列表 _,record，包含 id\n          <Space size=\"middle\">  \n            <Popconfirm  // 返回【操作按钮 popover】\n                title=\"Sure to delete?\"\n                onConfirm={()=>this.deleteData(_,record)} //需要回调参数的话，就需要改写为🌟 ()=>this.XXX() 🌟的形式！！！ ant 封装好了，可以返回对应列表 record，包含 id\n                >\n                <a>删除</a>\n            </Popconfirm>\n          </Space>\n        )\n      },\n    ]\n  }\n\n\n\n  // 搜索(ant 已经封装好了搜索方法,返回搜索值)\n  onSearch = async(inputValue) => {\n    console.log(inputValue);\n    //调用搜索接口(每次请求的就是 inputValue 的数据，如果为空则返回所有数据)\n    const res = await axios.get(`http://localhost:3001/data/?q=${inputValue}`);\n\n    //把数据更新到 setState 内，更新数据\n    this.setState({\n      list:res.data //🔥因为 json 写的是 data 对象！\n    })\n  };\n\n\n  \n\n\n  // 删除,发送【异步请求函数】，调用删除接口 (接收 state 传入的 _,record 数据,ant 封装好了，可以返回对应列表 record，包含 id)\n  deleteData = async(_,record) => {\n    //调用删除接口\n    await axios.delete(`http://localhost:3001/data/${record.id}`)\n\n    //重新加载列表\n    this.loadList()\n  }\n\n  \n\n\n\n  //🌟🌟 定义加载列表的【异步请求函数】(定义请求数据的方法)\n  loadList = async () => {\n    const res = await axios.get('http://localhost:3001/data')\n    console.log(res);\n\n    //🌟 把拿到的数据存到 state 的 list 内, 因为下面 render 内有调用 state.list\n    this.setState({\n      list: res.data //🔥因为 json 写的是 data 对象！\n    })\n  }\n\n\n\n\n\n  //🌟🌟 找到合适的【生命周期函数】,发送请求\n  componentDidMount () {\n    // 发送接口请求\n    this.loadList()\n  }\n\n\n\n\n  render () {\n    return (\n      <div className=\"container\">\n        {/* <Button type='primary'>按钮</Button> */}\n\n        {/* 搜索框，点击搜索图标、清除图标，或按下回车键时的回调，回调的 value 是当前输入框的值 */}\n        <Search\n          placeholder=\"请输入搜索关键词\"\n          allowClear\n          enterButton=\"搜索\"\n          size=\"large\"\n          onSearch={this.onSearch}\n          value={this.state.keyword}\n        />\n        <Table \n          //表格列数据\n          dataSource={this.state.list}\n          //表头数据\n          columns={this.state.columns} \n          key= {this.state.columns.key}\n          pagination={true}\n        />;\n      </div>\n    )\n  }\n}\n\nexport default App\n",{"ruleId":"15","severity":1,"message":"16","line":1,"column":10,"nodeType":"17","messageId":"18","endLine":1,"endColumn":16},{"ruleId":"19","severity":1,"message":"20","line":49,"column":17,"nodeType":"21","endLine":49,"endColumn":20},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]